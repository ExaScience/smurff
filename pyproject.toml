[build-system]
requires = [
    "setuptools>=42",
    "setuptools_scm",
    "pybind11",
    "scikit-build-core",
]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["python/smurff/_version.py"]
cmake.verbose = true
logging.level = "INFO"

[tool.scikit-build.cmake.define]
ENABLE_BOOST = "ON"
ENABLE_CMDLINE = "ON"
ENABLE_TESTS = "ON"
ENABLE_BLAS = "ON"

[tool.setuptools_scm]  # Section required
write_to = "python/smurff/_version.py"

[tool.setuptools]
package-dir = {"" = "python"}

[project]
name = "smurff"
dynamic = ["version"]
description = "Bayesian Factorization Methods"
keywords = ["bayesian factorization machine-learning high-dimensional side-information"]
readme = "README.rst"
authors = [
    {name = "Tom Vander Aa", email = "Tom.VanderAa@imec.be"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: C++",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "h5sparse-tensor",
    "numpy",
    "pandas",
    "scikit-learn",
    "scipy",
]
license = {text = "MIT"}

[project.urls]
Homepage = "http://github.com/ExaScience/smurff"

[project.scripts]
py_smurff = "smurff.cmdline:main"

[tool.cibuildwheel]
# Increase pip debugging output
build-verbosity = 3
# We skip these:
# - PyPy: never tested, pandas does not seem to work
# - CPython 3.6: unsupported by scikit_build_core
# - CPython 3.7: unsupported by h5sparse
# - CPython 3.8: removed from manylinux/musllinux
# - i686 and win32: we do not care about 32bit
skip = "pp* cp36-* cp37-* cp38-* *musl* *-win32 *i686"
test-command = 'pytest -n auto {project}/python/test'
test-requires = 'parameterized pytest pytest-xdist'

manylinux-x86_64-image = "vanderaa/manylinux2014_x86_64_smurff"
musllinux-x86_64-image = "vanderaa/musllinux_1_2_x86_64_smurff"

# - cibuildwheel on macos -

[tool.cibuildwheel.macos.config-settings]
"cmake.define.ENABLE_BLAS" = "ON"
"cmake.define.ENABLE_BOOST" = "OFF"
"cmake.define.ENABLE_CMDLINE" = "OFF"
"cmake.define.ENABLE_TESTS" = "OFF"
"cmake.define.BLA_VENDOR" = "Apple"
"cmake.define.CMAKE_TOOLCHAIN_FILE" = "vcpkg/scripts/buildsystems/vcpkg.cmake"

[tool.cibuildwheel.macos]
before-all = "ci/buildwheel/install_deps.sh"

# - cibuildwheel on linux -

[tool.cibuildwheel.linux.config-settings]
"cmake.define.ENABLE_BLAS" = "ON"
"cmake.define.ENABLE_BOOST" = "OFF"
"cmake.define.ENABLE_CMDLINE" = "OFF"
"cmake.define.ENABLE_TESTS" = "OFF"
"cmake.define.BLA_VENDOR" = "OpenBLAS"


# - cibuildwheel on windows -

[tool.cibuildwheel.windows.config-settings]
"cmake.define.ENABLE_BLAS" = "OFF"
"cmake.define.ENABLE_BOOST" = "OFF"
"cmake.define.ENABLE_CMDLINE" = "OFF"
"cmake.define.ENABLE_TESTS" = "OFF"
"cmake.define.CMAKE_TOOLCHAIN_FILE" = "vcpkg/scripts/buildsystems/vcpkg.cmake"
"cmake.define.VCPKG_TARGET_TRIPLET" = "x64-windows-static"

[tool.cibuildwheel.windows]
before-all = "ci\\buildwheel\\install_deps.bat"